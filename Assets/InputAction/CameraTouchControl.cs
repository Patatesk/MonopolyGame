//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputAction/CameraTouchControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraTouchControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraTouchControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraTouchControl"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""7b2ee4b9-f878-40ef-a882-16eaef8a8322"",
            ""actions"": [
                {
                    ""name"": ""FirstTouch"",
                    ""type"": ""Value"",
                    ""id"": ""c2423788-b484-4d9a-ac55-5beeb8126ed3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouch"",
                    ""type"": ""Value"",
                    ""id"": ""8b892399-1d8a-4aa4-bcba-6ecf55117828"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouchStart"",
                    ""type"": ""Button"",
                    ""id"": ""0b4d1b50-20c5-45f0-b38c-50bea2844058"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39fb4b9d-c77c-4fb1-9564-1fbeb7048a9a"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0286cc51-fa66-4d8f-9225-a1bce53323d3"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""482112c0-153a-46f7-bb67-16ac96f2587e"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_FirstTouch = m_Touch.FindAction("FirstTouch", throwIfNotFound: true);
        m_Touch_SecondTouch = m_Touch.FindAction("SecondTouch", throwIfNotFound: true);
        m_Touch_SecondTouchStart = m_Touch.FindAction("SecondTouchStart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_FirstTouch;
    private readonly InputAction m_Touch_SecondTouch;
    private readonly InputAction m_Touch_SecondTouchStart;
    public struct TouchActions
    {
        private @CameraTouchControl m_Wrapper;
        public TouchActions(@CameraTouchControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstTouch => m_Wrapper.m_Touch_FirstTouch;
        public InputAction @SecondTouch => m_Wrapper.m_Touch_SecondTouch;
        public InputAction @SecondTouchStart => m_Wrapper.m_Touch_SecondTouchStart;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @FirstTouch.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnFirstTouch;
                @FirstTouch.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnFirstTouch;
                @FirstTouch.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnFirstTouch;
                @SecondTouch.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouch;
                @SecondTouch.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouch;
                @SecondTouch.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouch;
                @SecondTouchStart.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouchStart;
                @SecondTouchStart.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouchStart;
                @SecondTouchStart.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouchStart;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FirstTouch.started += instance.OnFirstTouch;
                @FirstTouch.performed += instance.OnFirstTouch;
                @FirstTouch.canceled += instance.OnFirstTouch;
                @SecondTouch.started += instance.OnSecondTouch;
                @SecondTouch.performed += instance.OnSecondTouch;
                @SecondTouch.canceled += instance.OnSecondTouch;
                @SecondTouchStart.started += instance.OnSecondTouchStart;
                @SecondTouchStart.performed += instance.OnSecondTouchStart;
                @SecondTouchStart.canceled += instance.OnSecondTouchStart;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnFirstTouch(InputAction.CallbackContext context);
        void OnSecondTouch(InputAction.CallbackContext context);
        void OnSecondTouchStart(InputAction.CallbackContext context);
    }
}
